# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 00:27:19 on Apr 22,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: ../../lab2/lab01_testbench-interface/instr_register_test.sv(87): (vlog-2240) Treating stand-alone use of function 'final_report' as an implicit VOID cast.
# ** Warning: ../../lab2/lab01_testbench-interface/instr_register_test.sv(88): (vlog-2240) Treating stand-alone use of function 'regresion_report' as an implicit VOID cast.
# ** Warning: ../../lab2/lab01_testbench-interface/instr_register_test.sv(198): (vlog-2250) Function "final_report" has no return value assignment.
# ** Warning: ../../lab2/lab01_testbench-interface/instr_register_test.sv(210): (vlog-2250) Function "regresion_report" has no return value assignment.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 00:27:19 on Apr 22,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 4
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GCASE_NAME=RAND_RAND7 -GWRITE_ORDER=1 -GWRITE_NR=50 -GSEED_VAL=3644229482 -GREAD_ORDER=1 -GREAD_NR=50 
# Start time: 00:27:19 on Apr 22,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH .  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 11: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 1
# 
# Read from register location 11: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 1
# Writing to register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 11
# 
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 11
# Writing to register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 11
# 
# Read from register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 11
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 2
# 
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 2
# Writing to register location 25: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 13
# 
# Read from register location 25: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 13
# Writing to register location 13: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 11
# 
# Read from register location 13: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 11
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 9
# 
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 9
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 13
# 
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 13
# Writing to register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = -3
#   operand_b = 12
# 
# Read from register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = -3
#   operand_b = 12
# Writing to register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 0
# 
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 0
# Writing to register location 17: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 2
# 
# Read from register location 17: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 2
# Writing to register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 10
# 
# Read from register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 10
# Writing to register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 1
# 
# Read from register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 1
# Writing to register location 29: 
#   opcode = 1 (PASSA)
#   operand_a = 1
#   operand_b = 8
# 
# Read from register location 29: 
#   opcode = 1 (PASSA)
#   operand_a = 1
#   operand_b = 8
# Writing to register location 2: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 9
# 
# Read from register location 2: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 9
# Writing to register location 20: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 13
# 
# Read from register location 20: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 13
# Writing to register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 2
# 
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 2
# Writing to register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 4
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 4
# Writing to register location 8: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 9
# 
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 9
# Writing to register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 7
# 
# Read from register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 7
# Writing to register location 5: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 8
# 
# Read from register location 5: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 8
# Writing to register location 30: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 2
# 
# Read from register location 30: 
#   opcode = 5 (MULT)
#   operand_a = 8
#   operand_b = 2
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 5
# 
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 5
# Writing to register location 12: 
#   opcode = 6 (DIV)
#   operand_a = -11
#   operand_b = 14
# 
# Read from register location 12: 
#   opcode = 6 (DIV)
#   operand_a = -11
#   operand_b = 14
# Writing to register location 17: 
#   opcode = 4 (SUB)
#   operand_a = -2
#   operand_b = 14
# 
# Read from register location 17: 
#   opcode = 4 (SUB)
#   operand_a = -2
#   operand_b = 14
# Writing to register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 12
# 
# Read from register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 12
# Writing to register location 29: 
#   opcode = 4 (SUB)
#   operand_a = -4
#   operand_b = 1
# 
# Read from register location 29: 
#   opcode = 4 (SUB)
#   operand_a = -4
#   operand_b = 1
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 4
# 
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 4
# Writing to register location 29: 
#   opcode = 4 (SUB)
#   operand_a = -12
#   operand_b = 13
# 
# Read from register location 29: 
#   opcode = 4 (SUB)
#   operand_a = -12
#   operand_b = 13
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 12
# 
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 12
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -4
#   operand_b = 13
# 
# Read from register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -4
#   operand_b = 13
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 11
# 
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 11
# Writing to register location 7: 
#   opcode = 3 (ADD)
#   operand_a = 11
#   operand_b = 4
# 
# Read from register location 7: 
#   opcode = 3 (ADD)
#   operand_a = 11
#   operand_b = 4
# Writing to register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
# 
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 7
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 7
# Writing to register location 17: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 15
# 
# Read from register location 17: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 15
# Writing to register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
# Writing to register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 1
# 
# Read from register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 1
# Writing to register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = -15
#   operand_b = 3
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = -15
#   operand_b = 3
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = -13
#   operand_b = 8
# 
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = -13
#   operand_b = 8
# Writing to register location 21: 
#   opcode = 6 (DIV)
#   operand_a = 8
#   operand_b = 14
# 
# Read from register location 21: 
#   opcode = 6 (DIV)
#   operand_a = 8
#   operand_b = 14
# Writing to register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 14
# 
# Read from register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 14
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 5
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 5
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 1
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 1
# Writing to register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 6
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 6
# Writing to register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 6
#   operand_b = 7
# 
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 6
#   operand_b = 7
# Writing to register location 17: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 9
# 
# Read from register location 17: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 9
# Writing to register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 12
# 
# Read from register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 12
# Writing to register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
# 
# Read from register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
# Writing to register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 14
# 
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 14
# 
# Reading back the same register locations written...
# 
# Read from register location 20: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 13
#  result_t = 13
# 
# Opcode is correct from register location 20: 
# Operant_a is correct from register location 20: 
# Operant_b is correct from register location 20: 
# Result check: Approved
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 6: 
# Operant_a is correct from register location 6: 
# Operant_b is correct from register location 6: 
# Result check: Approved
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 7
#  result_t = 4
# 
# Opcode is correct from register location 10: 
# Operant_a is correct from register location 10: 
# Operant_b is correct from register location 10: 
# Result check: Approved
# 
# Read from register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 1
#  result_t = -5
# 
# Opcode is correct from register location 8: 
# Operant_a is correct from register location 8: 
# Operant_b is correct from register location 8: 
# Result check: Approved
# 
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 13
#  result_t = -4
# 
# Opcode is correct from register location 0: 
# Operant_a is correct from register location 0: 
# Operant_b is correct from register location 0: 
# Result check: Approved
# 
# Read from register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 12
#  result_t = 9
# 
# Opcode is correct from register location 30: 
# Operant_a is correct from register location 30: 
# Operant_b is correct from register location 30: 
# Result check: Approved
# 
# Read from register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
#  result_t = 12
# 
# Opcode is correct from register location 5: 
# Operant_a is correct from register location 5: 
# Operant_b is correct from register location 5: 
# Result check: Approved
# 
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
#  result_t = -1
# 
# Opcode is correct from register location 31: 
# Operant_a is correct from register location 31: 
# Operant_b is correct from register location 31: 
# Result check: Approved
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 4
#  result_t = 2
# 
# Opcode is correct from register location 23: 
# Operant_a is correct from register location 23: 
# Operant_b is correct from register location 23: 
# Result check: Approved
# 
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
#  result_t = -1
# 
# Opcode is correct from register location 31: 
# Operant_a is correct from register location 31: 
# Operant_b is correct from register location 31: 
# Result check: Approved
# 
# Read from register location 24: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 24: 
# Operant_a is correct from register location 24: 
# Operant_b is correct from register location 24: 
# Result check: Approved
# 
# Read from register location 12: 
#   opcode = 6 (DIV)
#   operand_a = -11
#   operand_b = 14
#  result_t = 0
# 
# Opcode is correct from register location 12: 
# Operant_a is correct from register location 12: 
# Operant_b is correct from register location 12: 
# Result check: Approved
# 
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 13
#  result_t = -4
# 
# Opcode is correct from register location 0: 
# Operant_a is correct from register location 0: 
# Operant_b is correct from register location 0: 
# Result check: Approved
# 
# Read from register location 11: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 1
#  result_t = -6
# 
# Opcode is correct from register location 11: 
# Operant_a is correct from register location 11: 
# Operant_b is correct from register location 11: 
# Result check: Approved
# 
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 2
#  result_t = 11
# 
# Opcode is correct from register location 9: 
# Operant_a is correct from register location 9: 
# Operant_b is correct from register location 9: 
# Result check: Approved
# 
# Read from register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 7
#  result_t = 0
# 
# Opcode is correct from register location 2: 
# Operant_a is correct from register location 2: 
# Operant_b is correct from register location 2: 
# Result check: Approved
# 
# Read from register location 17: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 9
#  result_t = -2
# 
# Opcode is correct from register location 17: 
# Operant_a is correct from register location 17: 
# Operant_b is correct from register location 17: 
# Result check: Approved
# 
# Read from register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
#  result_t = 12
# 
# Opcode is correct from register location 5: 
# Operant_a is correct from register location 5: 
# Operant_b is correct from register location 5: 
# Result check: Approved
# 
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 11
#  result_t = -4
# 
# Opcode is correct from register location 18: 
# Operant_a is correct from register location 18: 
# Operant_b is correct from register location 18: 
# Result check: Approved
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 15: 
# Operant_a is correct from register location 15: 
# Operant_b is correct from register location 15: 
# Result check: Approved
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 1
#  result_t = 5
# 
# Opcode is correct from register location 7: 
# Operant_a is correct from register location 7: 
# Operant_b is correct from register location 7: 
# Result check: Approved
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 4
#  result_t = 2
# 
# Opcode is correct from register location 23: 
# Operant_a is correct from register location 23: 
# Operant_b is correct from register location 23: 
# Result check: Approved
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 15: 
# Operant_a is correct from register location 15: 
# Operant_b is correct from register location 15: 
# Result check: Approved
# 
# Read from register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 1
#  result_t = -5
# 
# Opcode is correct from register location 8: 
# Operant_a is correct from register location 8: 
# Operant_b is correct from register location 8: 
# Result check: Approved
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 15: 
# Operant_a is correct from register location 15: 
# Operant_b is correct from register location 15: 
# Result check: Approved
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 16: 
# Operant_a is correct from register location 16: 
# Operant_b is correct from register location 16: 
# Result check: Approved
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 1
#  result_t = 5
# 
# Opcode is correct from register location 7: 
# Operant_a is correct from register location 7: 
# Operant_b is correct from register location 7: 
# Result check: Approved
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 6
#  result_t = -3
# 
# Opcode is correct from register location 25: 
# Operant_a is correct from register location 25: 
# Operant_b is correct from register location 25: 
# Result check: Approved
# 
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 14
#  result_t = -210
# 
# Opcode is correct from register location 21: 
# Operant_a is correct from register location 21: 
# Operant_b is correct from register location 21: 
# Result check: Approved
# 
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
#  result_t = -1
# 
# Opcode is correct from register location 31: 
# Operant_a is correct from register location 31: 
# Operant_b is correct from register location 31: 
# Result check: Approved
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
#  result_t = -1
# 
# Opcode is correct from register location 3: 
# Operant_a is correct from register location 3: 
# Operant_b is correct from register location 3: 
# Result check: Approved
# 
# Read from register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 1
#  result_t = -5
# 
# Opcode is correct from register location 8: 
# Operant_a is correct from register location 8: 
# Operant_b is correct from register location 8: 
# Result check: Approved
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 16: 
# Operant_a is correct from register location 16: 
# Operant_b is correct from register location 16: 
# Result check: Approved
# 
# Read from register location 26: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 26: 
# Operant_a is correct from register location 26: 
# Operant_b is correct from register location 26: 
# Result check: Approved
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 4
#  result_t = 2
# 
# Opcode is correct from register location 23: 
# Operant_a is correct from register location 23: 
# Operant_b is correct from register location 23: 
# Result check: Approved
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
#  result_t = -1
# 
# Opcode is correct from register location 3: 
# Operant_a is correct from register location 3: 
# Operant_b is correct from register location 3: 
# Result check: Approved
# 
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 13
#  result_t = -4
# 
# Opcode is correct from register location 0: 
# Operant_a is correct from register location 0: 
# Operant_b is correct from register location 0: 
# Result check: Approved
# 
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 11
#  result_t = -4
# 
# Opcode is correct from register location 18: 
# Operant_a is correct from register location 18: 
# Operant_b is correct from register location 18: 
# Result check: Approved
# 
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
#  result_t = -1
# 
# Opcode is correct from register location 31: 
# Operant_a is correct from register location 31: 
# Operant_b is correct from register location 31: 
# Result check: Approved
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 16: 
# Operant_a is correct from register location 16: 
# Operant_b is correct from register location 16: 
# Result check: Approved
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
#  result_t = -1
# 
# Opcode is correct from register location 3: 
# Operant_a is correct from register location 3: 
# Operant_b is correct from register location 3: 
# Result check: Approved
# 
# Read from register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 12
#  result_t = 9
# 
# Opcode is correct from register location 30: 
# Operant_a is correct from register location 30: 
# Operant_b is correct from register location 30: 
# Result check: Approved
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 6: 
# Operant_a is correct from register location 6: 
# Operant_b is correct from register location 6: 
# Result check: Approved
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 5
#  result_t = 14
# 
# Opcode is correct from register location 22: 
# Operant_a is correct from register location 22: 
# Operant_b is correct from register location 22: 
# Result check: Approved
# 
# Read from register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 14
#   operand_b = 14
#  result_t = 196
# 
# Opcode is correct from register location 1: 
# Operant_a is correct from register location 1: 
# Operant_b is correct from register location 1: 
# Result check: Approved
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 1
#  result_t = 5
# 
# Opcode is correct from register location 7: 
# Operant_a is correct from register location 7: 
# Operant_b is correct from register location 7: 
# Result check: Approved
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 15: 
# Operant_a is correct from register location 15: 
# Operant_b is correct from register location 15: 
# Result check: Approved
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 6: 
# Operant_a is correct from register location 6: 
# Operant_b is correct from register location 6: 
# Result check: Approved
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -1
#   operand_b = 10
#  result_t = -1
# 
# Opcode is correct from register location 3: 
# Operant_a is correct from register location 3: 
# Operant_b is correct from register location 3: 
# Result check: Approved
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 6
#  result_t = -3
# 
# Opcode is correct from register location 25: 
# Operant_a is correct from register location 25: 
# Operant_b is correct from register location 25: 
# Result check: Approved
# 
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 11
#  result_t = -4
# 
# Opcode is correct from register location 18: 
# Operant_a is correct from register location 18: 
# Operant_b is correct from register location 18: 
# Result check: Approved
# Failed tests 0: 
# Passed tests 51: 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH .  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../../lab2/lab01_testbench-interface/instr_register_test.sv(96)
#    Time: 1056 ns  Iteration: 1  Instance: /top/test
# End time: 00:27:20 on Apr 22,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
